var db = require(global.DIR_SERVER + '/db.tjs'),
    collectionName = 'games';

/**
 * game.index
 * will list out all created games.
 * @param {function} callback
 * @param {object} options
 */
exports.index = function (options, callback) {
  await {
    db.getCollection('games', defer(games, client));
  }
  await {
    games.count(defer(e, count));
    games.find().toArray(defer(e2, results));
  }
  
  console.log(results);
  callback(count.toString() + ' games');

};

/**
 * game.create
 * will create a new game with the provided list of player IDs.
 * @param {function} callback
 * @param {object} options
 */
exports.create = function (options, callback) {

  var games,
      client,
      e,
      results,
      firstPlayer,
      playerList = options['players'];
  
  if (!playerList) {
    return callback({e: 1, msg: 'Must specify players in ' +
                                'players=userid1,userid2 format'});
  }
  
  playerList.unshift(options.currentUser);
  
  firstPlayer = playerList[0];
  
  var newGame = {
    letters: '',
    players: playerList,
    currentPlayer: firstPlayer,
    state: 'CREATED'
  };

  await {
    db.getCollection(collectionName, defer(games, client));
  }

  await {
    games.insert(newGame, defer(e, results));
  } 

  console.log(e, results);

  client.close();
  if (e) {
    return callback({e: 2, msg: e});
  } else {
    return callback({e: 0, msg: 'Success', game: results[0]});
  }

};


/**
 * game.get
 * will return either a specific game or all active games for the provided userID.
 * @param {function} callback
 * @param {object} options
 */
exports.get = function (options, callback) {

  var gameId = options.gameid,
      userId = options.userid,
      games,
      client;
  
  if (!gameId && !userId) {
    return callback({e:1, msg: 'You must provide either a game ID in the ' +
                               'format gameid=12345 or a user ID in the ' +
                               'format userid=12345'});
  }
  
  await {
    db.getCollection(collectionName, defer(games, client));
  }
  
  // Retrieve game with provided game ID.
  if (gameId) {
    var gameDetails,
        e,
        game = {_id: new client.bson_serializer.ObjectID(gameId)};  
  
    await {
      games.find(game).toArray(defer(e, gameDetails));
    }
    console.log(gameDetails);
  
    if (gameDetails.length) {
      callback({e: 0, game: gameDetails[0]});
    } else {
      callback({e: 2, msg: 'No game with that ID found'});
    }
    
    client.close();
  
  }
  
  // Retrieve a list of games with provided user ID as one of the participants.
  if (userId) {
    var gameList,
        e,
        game = {players: userId};
    
    await {
      games.find(game).toArray(defer(e, gameList));
    }
    
    if (gameList.length) {
      callback({e: 0, games: gameList});
    } else {
      callback({e: 2, games: []});
    }
    
    client.close();
  }
};

exports.play = function (options, callback) {
  console.log('hi', options);
  
  var games,
      client,
      e, game,
      query,
      currentPlayer,
      nextPlayer;
  
  await {
    db.getCollection(collectionName, defer(games, client));
  }
  
  query = {_id: new client.bson_serializer.ObjectID(options.gameid)};

  await {
    games.find(query).toArray(defer(e, game));
  }
  
  if (!game.length) {
    return callback({e: 1, msg: 'that game does not exist in our database.'});
  }
  game = game[0];
  
  game.letters += options.letter;

  console.log(game.currentPlayer);
  currentPlayer = game.players.indexOf(game.currentPlayer);
  console.log('currentPlayer: ' + currentPlayer);
  nextPlayer = currentPlayer + 1;
  console.log('nextPlayer: ' + nextPlayer);
  if (nextPlayer === game.players.length) {
    console.log('back to 0');
    nextPlayer = 0;
  }
  game.currentPlayer = game.players[nextPlayer];
  console.log(game.currentPlayer);

  games.update(query, game);
  
  callback(game);
};
