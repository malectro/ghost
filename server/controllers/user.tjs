var db = require(global.DIR_SERVER + '/db.tjs'),
    bcrypt = require('bcrypt');

function validatePhone(phone) {
}

function validateEmail(email) {
}

function defaults(defaults, given) {
  var ob = {};

  for (var i in defaults) {
    if (given[i]) {
      ob[i] = given[i];
    }
    else if (defaults[i] !== null) {
      ob[i] = defaults[i];
    }
  }

  return ob;
}

exports.index = function (options, callback) {
  console.log(options);
  await {
    db.getCollection('users', defer(users, client));
  }
  await {
    users.count(defer(e, count));
    users.find().toArray(defer(e2, results));
  }
  console.log(results);
  callback(count.toString() + ' users');
};

exports.create = function (options, callback) {
  var client, users, finder, count, errorType;

  var user = defaults({
    username: 'Specter',
    // Facebook Login info
    fbid: '',
    accessToken: '',
    expires: '',
    // If not using Facebook, provide password
    password: 'password',
    // Either email or phone is required
    email: '',
    phone: '123-456-7890',
  }, options);
  
  // Check if all facebook access info is provided
  if (!user.fbid && !user.accessToken && !user.expires) {
    // Check if a password is provided
    if (user.password) {
      var pwd = user.password;
      // Hash password using bcrypt
      await {
        bcrypt.gen_salt(10, defer(err, salt));
      }
      await {
        bcrypt.encrypt(pwd, salt, defer(err, hash));
      }
      user.password = hash;
    } else {
      return callback({e: 1,
                       request: 'create',
                       msg: 'Please provide a password or a facebook access token'});
    }
  }
  
  // user creation requires email or phone
  if (!user.email && !user.phone) {
    return callback({e: 2,
                     request: 'create',
                     msg: 'Please specify an email or phone.'});
  }

  // format some data
  if (user.phone) {
    user.phone = parseInt(user.phone, 10);
  }

  await {
    db.getCollection('users', defer(users, client));
  }

  if (user.email) {
    finder = users.find({email: user.email});
    errorType = 'email';
  }
  else {
    finder = users.find({phone: user.phone});
    errorType = 'phone';
  }
 
  await {
    finder.count(defer(e, count));
  } 

  if (count > 0) {
    client.close();
    return callback({e: 3,
                     request: 'create',
                     msg: 'There is already a user with that ' + errorType + '.'});
  }

  await {
    users.insert(user, defer(e, storedUser));
  } 

  console.log(e, storedUser)

  client.close();
  return callback({e: 0,
                   request: 'create',
                   userId: storedUser[0]._id,
                   username: storedUser[0].username});
};


exports.authenticate = function (options, callback) {
  
  var userQuery = {username: options.username},
      testpass = options.password;
  
  await {
    this.get(userQuery, defer(query));
  }

  if(query.e != 0) {
    return callback({e: 1, request: 'login', msg: 'Username and/or password invalid.'});
  }
  
  await {
    bcrypt.compare(testpass, query.user.password, defer(err, res));
  }
  
  if (res) {
    return callback({e: 0, request: 'login',
                           msg: 'Authenticated!',
                           userId: query.user._id,
                           username: query.user.username});
  } else {
    return callback({e: 1, request: 'login', msg: 'Username and/or password invalid.'});
  }

};


exports.get = function (options, callback) {
  var user = defaults({
    _id: null,
    username: null,
    email: null,
    phone: null 
  }, options);

  if (!user._id && !user.email && !user.phone && !user.username) {
    return callback({e:1, msg: 'You must specify an index.'});
  }
  
  // Format phone # query correctly
  if (user.phone) {
    var intPhone = parseInt(user.phone, 10);
    user.phone = intPhone;
  }

  var client, users, e, list;

  await {
    db.getCollection('users', defer(users, client));
  }
  await {
    users.find(user).toArray(defer(e, list));
  }

  if (list.length) {
    callback({e: 0, user: list[0]});
  }
  else {
    callback({e: 2, msg: 'No user found'});
  }

  client.close();
};

