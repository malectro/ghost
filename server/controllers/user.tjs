var db = require(global.DIR_SERVER + '/db.tjs'),
    bcrypt = require('bcrypt');

/**
 * Phone # validation function (same as that in app.js on the frontend).
 * @param {Number} phone
 */
function validatePhone(phone) {
  return /^\d+$/.test(phone);
}


/**
 * Email address validation function (same as that in app.js on the frontend).
 * @param {string} email
 */
function validateEmail(email) {
  return /^[a-zA-Z0-9\+\._]+@[a-zA-Z0-9_]+\.[a-z]+$/.test(email);
}


/**
 * Returns an object with only the user fields listed in safeFields.
 */
function scrubUser (user) {
  var scrubbedUser = {},
      safeFields = ['_id','username','email','phone'];

  for(var i in safeFields) {
    var field = safeFields[i];
    scrubbedUser[field] = user[field];
  }
  
  return scrubbedUser;
}


/**
 * Creates an object from the provided defaults and given objects.
 * Uses given values when provided, else default values.
 * @param {object} defaults
 * @param {object} given
 */
function defaults(defaults, given) {
  var ob = {};

  for (var i in defaults) {
    if (given[i]) {
      ob[i] = given[i];
    }
    else if (defaults[i] !== null) {
      ob[i] = defaults[i];
    }
  }

  return ob;
}


/**
 * Retrieves the user document from 'users' collection based on provided
 * id, email, phone, or username.  Not accessible externally.
 * @param {function} callback
 * @param {object} options
 */
function get(options, callback) {

  var user = defaults({
    _id: null,
    username: null,
    email: null,
    phone: null 
  }, options);

  if (!user._id && !user.email && !user.phone && !user.username) {
    return callback({e:1, msg: 'You must specify an index.'});
  }
  
  // Format phone # query correctly
  if (user.phone) {
    var intPhone = parseInt(user.phone, 10);
    user.phone = intPhone;
  }

  var client, users, e, list;

  await {
    db.getCollection('users', defer(users, client));
  }
  
  if (user._id) {
    var bsonId = new client.bson_serializer.ObjectID(user._id);
    user._id = bsonId;
  }
  
  await {
    users.find(user).toArray(defer(e, list));
  }

  if (list.length) {
    callback({e: 0, user: list[0]});
  }
  else {
    callback({e: 2, msg: 'No user found'});
  }

  client.close();
}


/**
 * user.index
 * A debugging catchall response that lists out all users in the database.
 * @param {function} callback
 * @param {object} options
 */
// TODO(dbow): Remove this once dev work is complete.
exports.index = function (options, callback) {
  await {
    db.getCollection('users', defer(users, client));
  }
  await {
    users.count(defer(e, count));
    users.find().toArray(defer(e2, results));
  }
  console.log(results);
  callback(count.toString() + ' users');
};


/**
 * user.create
 * Takes a new user object and creates a new document in the 'users' collection.
 * @param {function} callback
 * @param {object} options
 */
exports.create = function (options, callback) {
  var client, users, finder, count, errorType;

  var user = defaults({
    username: 'Specter',
    // Facebook Login info
    fbid: '',
    accessToken: '',
    expires: '',
    // If not using Facebook, provide password
    password: 'password',
    // Either email or phone is required
    email: '',
    phone: '123-456-7890',
  }, options);
  
  // Check if all facebook access info is provided
  if (!user.fbid && !user.accessToken && !user.expires) {
    // Check if a password is provided
    if (user.password) {
      var pwd = user.password;
      // Hash password using bcrypt
      await {
        bcrypt.gen_salt(10, defer(err, salt));
      }
      await {
        bcrypt.encrypt(pwd, salt, defer(err, hash));
      }
      user.password = hash;
    } else {
      return callback({e: 1,
                       request: 'create',
                       msg: 'Please provide a password or a facebook access token'});
    }
  }
  
  // user creation requires email or phone
  if (!user.email && !user.phone) {
    return callback({e: 2,
                     request: 'create',
                     msg: 'Please specify an email or phone.'});
  }

  // format some data
  if (user.phone) {
    user.phone = parseInt(user.phone, 10);
  }

  await {
    db.getCollection('users', defer(users, client));
  }

  if (user.email) {
    finder = users.find({email: user.email});
    errorType = 'email';
  }
  else {
    finder = users.find({phone: user.phone});
    errorType = 'phone';
  }
 
  await {
    finder.count(defer(e, count));
  } 

  if (count > 0) {
    client.close();
    return callback({e: 3,
                     request: 'create',
                     msg: 'There is already a user with that ' + errorType + '.'});
  }

  await {
    users.insert(user, defer(e, storedUser));
  } 

  console.log(e, storedUser)

  client.close();
  return callback({e: 0,
                   request: 'create',
                   userId: storedUser[0]._id});
};


/**
 * user.authenticate
 * Verifies if the given password matches the stored hash for the given username.
 * @param {function} callback
 * @param {object} options
 */
exports.authenticate = function (options, callback) {
  
  var userQuery = {username: options.username},
      testpass = options.password;
  
  await {
    get(userQuery, defer(query));
  }

  if(query.e != 0) {
    return callback({e: 1, request: 'login', msg: 'Username and/or password invalid.'});
  }
  
  await {
    bcrypt.compare(testpass, query.user.password, defer(err, res));
  }
  
  if (res) {
    return callback({e: 0, 
                     request: 'login',
                     msg: 'Authenticated!',
                     userId: query.user._id});
  } else {
    return callback({e: 1, request: 'login', msg: 'Username and/or password invalid.'});
  }

};


/**
 * user.retrieve
 * A function to retrieve client-safe user info (no login credentials).
 * @param {function} callback
 * @param {object} options
 */
exports.retrieve = function (options, callback) {

  var userQuery = options,
      scrubbedUser;
  
  await {
    get(userQuery, defer(query));
  }
  
  if(query.e != 0) {
    return callback({e: 1, request: 'view-profile', msg: query.msg});
  }
  
  scrubbedUser = scrubUser(query.user);
  
  return callback({e:0,
                   request: 'view-profile',
                   user: scrubbedUser});
  
};


/**
 * user.edit
 * Retrieves a user object based on provided _id and updates that object
 * with fields provided in options.
 */
exports.edit = function (options, callback) {
  
  var queryObject = {_id: options._id},
      updateFields = ['username','email','phone'],
      user,
      update = false;
  
  await {
    get(queryObject, defer(queryResult));
  }

  if(queryResult.e != 0) {
    return callback({e: 1, request: 'edit-profile', msg: query.msg});
  }
  
  user = queryResult.user;

  for (var i in updateFields) {
    var field = updateFields[i];
    if(user[field] != options[field]) {
      user[field] = options[field];
      update = true;
    }
  }
  
  if (update) {
    console.log('update');
    await {
      db.getCollection('users', defer(users, client));
    }
    await {
      console.log(user);
      users.update({_id: user._id}, user);
    }
  }
    
  scrubbedUser = scrubUser(user);
  console.log(user);
  
  client.close();
  
  return callback({e:0,
                   request: 'edit-profile',
                   user: scrubbedUser});
  
};
